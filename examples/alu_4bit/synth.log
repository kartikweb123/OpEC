
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54 (git sha1 db72ec3bd, g++ 15.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)

-- Executing script file `alu_4bit.ys' --

1. Executing Verilog-2005 frontend: rtl/alu_4bit.v
Parsing Verilog input from `rtl/alu_4bit.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\alu_4bit'.
rtl/alu_4bit.v:35: Warning: Identifier `\carry_out' is implicitly declared.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     \dff
Parameter \WIDTH = 1

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Parameter \WIDTH = 4

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 2

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 2
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.

2.5. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010

2.6. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Removing unused module `\dff'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010

3.1.2. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$23 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$21 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$25 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$23'.
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$21'.
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$25'.

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$23'.
     1/1: $0\q[3:0]
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$21'.
     1/1: $0\q[0:0]
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$25'.
     1/1: $0\q[1:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$23'.
  created $adff cell `$procdff$31' with positive edge clock and positive level reset.
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$21'.
  created $adff cell `$procdff$36' with positive edge clock and positive level reset.
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$25'.
  created $adff cell `$procdff$41' with positive edge clock and positive level reset.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$23'.
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$21'.
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$25'.
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
<suppressed ~2 debug messages>
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
<suppressed ~2 debug messages>
Optimizing module alu_4bit.
<suppressed ~3 debug messages>
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
<suppressed ~2 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Removed 6 unused cells and 22 unused wires.
<suppressed ~12 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000001...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000100...
Checking module alu_4bit...
Warning: multiple conflicting drivers for alu_4bit.\carry_out:
    port Y[4] of cell $add$rtl/alu_4bit.v:35$9 ($add)
    port Y[4] of cell $add$rtl/alu_4bit.v:36$11 ($add)
Found and reported 1 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell alu_4bit.$add$rtl/alu_4bit.v:35$9 ($add).
Removed top 1 bits (of 5) from port Y of cell alu_4bit.$add$rtl/alu_4bit.v:35$9 ($add).
Removed top 1 bits (of 5) from port A of cell alu_4bit.$add$rtl/alu_4bit.v:35$9 ($add).
Removed top 1 bits (of 2) from port B of cell alu_4bit.$eq$rtl/alu_4bit.v:39$13 ($eq).
Removed top 1 bits (of 5) from port Y of cell alu_4bit.$add$rtl/alu_4bit.v:35$8 ($add).
Removed top 1 bits (of 5) from wire alu_4bit.$add$rtl/alu_4bit.v:35$8_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu_4bit:
  creating $macc model for $add$rtl/alu_4bit.v:35$8 ($add).
  creating $macc model for $add$rtl/alu_4bit.v:35$9 ($add).
  merging $macc model for $add$rtl/alu_4bit.v:35$8 into $add$rtl/alu_4bit.v:35$9.
  creating $alu model for $macc $add$rtl/alu_4bit.v:35$9.
  creating $alu cell for $add$rtl/alu_4bit.v:35$9: $auto$alumacc.cc:495:replace_alu$43
  created 1 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.
<suppressed ~1 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~237 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.
<suppressed ~21 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 13 unused cells and 35 unused wires.
<suppressed ~14 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.3. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.4. Extracting gate netlist of module `\alu_4bit' to `<abc-temp-dir>/input.blif'..
Extracted 54 gates and 64 wires to a netlist network with 10 inputs and 5 outputs.

3.22.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:               MUX cells:       13
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        6
ABC RESULTS:                OR cells:        6
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       49
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module alu_4bit.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 36 unused wires.
<suppressed ~6 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `alu_4bit'. Setting top module to alu_4bit.

3.24.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001

3.24.2. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Removed 0 unused modules.

3.25. Printing statistics.

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000001 ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of ports:                  4
   Number of port bits:              4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DFF_PN0_                      1

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000010 ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of ports:                  4
   Number of port bits:              6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_DFF_PN0_                      2

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000100 ===

   Number of wires:                  4
   Number of wire bits:             10
   Number of public wires:           4
   Number of public wire bits:      10
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_DFF_PN0_                      4

=== alu_4bit ===

   Number of wires:                 59
   Number of wire bits:             79
   Number of public wires:          13
   Number of public wire bits:      33
   Number of ports:                  7
   Number of port bits:             17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                       8
     $_AND_                          4
     $_MUX_                         13
     $_NOR_                          2
     $_NOT_                          6
     $_OR_                           6
     $_XNOR_                         6
     $_XOR_                          6
     $paramod\dff\WIDTH=s32'00000000000000000000000000000001      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000010      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000100      3

=== design hierarchy ===

   alu_4bit                          1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000001      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000010      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000100      3

   Number of wires:                 79
   Number of wire bits:            119
   Number of public wires:          33
   Number of public wire bits:      73
   Number of ports:                 27
   Number of port bits:             57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 66
     $_ANDNOT_                       8
     $_AND_                          4
     $_DFF_PN0_                     15
     $_MUX_                         13
     $_NOR_                          2
     $_NOT_                          6
     $_OR_                           6
     $_XNOR_                         6
     $_XOR_                          6

3.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000001...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000100...
Checking module alu_4bit...
Found and reported 0 problems.

4. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
<suppressed ~5 debug messages>

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

5.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu_4bit':
  mapped 15 $_DFFSR_PNN_ cells to \DFFSR cells.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\alu_4bit' to `<abc-temp-dir>/input.blif'..
Extracted 51 gates and 61 wires to a netlist network with 10 inputs and 5 outputs.

6.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/user/Projects/OpEC/examples/alu_4bit/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/user/Projects/OpEC/examples/alu_4bit/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        1
ABC RESULTS:           AOI21X1 cells:        5
ABC RESULTS:           AOI22X1 cells:        1
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           NAND2X1 cells:        3
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:             OR2X1 cells:        3
ABC RESULTS:           XNOR2X1 cells:        6
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:       46
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.
Removed 0 unused cells and 82 unused wires.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_4bit..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing Verilog backend.

8.1. Executing BMUXMAP pass.

8.2. Executing DEMUXMAP pass.
Dumping module `\alu_4bit'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 54f6618b2a, CPU: user 0.27s system 0.02s, MEM: 32.72 MB peak
Yosys 0.54 (git sha1 db72ec3bd, g++ 15.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)
Time spent: 51% 2x abc (0 sec), 16% 19x opt_expr (0 sec), ...
