
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54 (git sha1 db72ec3bd, g++ 15.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)

-- Executing script file `alu_4bit.ys' --

1. Executing Verilog-2005 frontend: rtl/alu_4bit.v
Parsing Verilog input from `rtl/alu_4bit.v' to AST representation.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\alu_4bit'.
rtl/alu_4bit.v:39: Warning: Identifier `\carry_out' is implicitly declared.
Generating RTLIL representation for module `\notgate'.
Successfully finished Verilog frontend.

2. Executing Liberty frontend: gscl45nm.lib
Imported 31 cell types from liberty file.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     \dff
Used module:     \notgate
Parameter \WIDTH = 1

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Parameter \WIDTH = 4

3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 2

3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\dff'.
Parameter \WIDTH = 2
Generating RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 1

3.5. Executing AST frontend in derive mode using pre-parsed AST for module `\notgate'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.

3.6. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001

3.7. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001
Removing unused module `\notgate'.
Removing unused module `\dff'.
Removed 2 unused modules.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001

4.1.2. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001
Removed 0 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$24 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$22 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Marked 1 switch rules as full_case in process $proc$rtl/dff.v:9$26 in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 0 assignments to connections.

4.2.4. Executing PROC_INIT pass (extract init attributes).

4.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$24'.
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$22'.
Found async reset \rst_n in `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$26'.

4.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$24'.
     1/1: $0\q[3:0]
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$22'.
     1/1: $0\q[0:0]
Creating decoders for process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$26'.
     1/1: $0\q[1:0]

4.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$24'.
  created $adff cell `$procdff$33' with positive edge clock and positive level reset.
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$22'.
  created $adff cell `$procdff$38' with positive edge clock and positive level reset.
Creating register for signal `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.\q' using process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$26'.
  created $adff cell `$procdff$43' with positive edge clock and positive level reset.

4.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000100.$proc$rtl/dff.v:9$24'.
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000001.$proc$rtl/dff.v:9$22'.
Removing empty process `$paramod\dff\WIDTH=s32'00000000000000000000000000000010.$proc$rtl/dff.v:9$26'.
Cleaned up 0 empty switches.

4.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
<suppressed ~2 debug messages>
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
<suppressed ~2 debug messages>
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.
<suppressed ~3 debug messages>
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
<suppressed ~2 debug messages>

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Removed 6 unused cells and 21 unused wires.
<suppressed ~11 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000001...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000100...
Checking module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001...
Checking module alu_4bit...
Warning: multiple conflicting drivers for alu_4bit.\carry_out:
    port Y[4] of cell $add$rtl/alu_4bit.v:39$9 ($add)
    port Y[4] of cell $add$rtl/alu_4bit.v:40$11 ($add)
Found and reported 1 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.6.6. Executing OPT_DFF pass (perform DFF optimizations).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.6.9. Rerunning OPT passes. (Maybe there is more to do..)

4.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.6.13. Executing OPT_DFF pass (perform DFF optimizations).

4.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.6.16. Finished OPT passes. (There is nothing left to do.)

4.7. Executing FSM pass (extract and optimize FSM).

4.7.1. Executing FSM_DETECT pass (finding FSMs in design).

4.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.8. Executing OPT pass (performing simple optimizations).

4.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.8.6. Executing OPT_DFF pass (perform DFF optimizations).

4.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.8.9. Finished OPT passes. (There is nothing left to do.)

4.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell alu_4bit.$add$rtl/alu_4bit.v:39$9 ($add).
Removed top 1 bits (of 5) from port Y of cell alu_4bit.$add$rtl/alu_4bit.v:39$9 ($add).
Removed top 1 bits (of 5) from port A of cell alu_4bit.$add$rtl/alu_4bit.v:39$9 ($add).
Removed top 1 bits (of 2) from port B of cell alu_4bit.$eq$rtl/alu_4bit.v:43$13 ($eq).
Removed top 1 bits (of 5) from port Y of cell alu_4bit.$add$rtl/alu_4bit.v:39$8 ($add).
Removed top 1 bits (of 5) from wire alu_4bit.$add$rtl/alu_4bit.v:39$8_Y.

4.10. Executing PEEPOPT pass (run peephole optimizers).

4.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu_4bit:
  creating $macc model for $add$rtl/alu_4bit.v:39$8 ($add).
  creating $macc model for $add$rtl/alu_4bit.v:39$9 ($add).
  merging $macc model for $add$rtl/alu_4bit.v:39$8 into $add$rtl/alu_4bit.v:39$9.
  creating $alu model for $macc $add$rtl/alu_4bit.v:39$9.
  creating $alu cell for $add$rtl/alu_4bit.v:39$9: $auto$alumacc.cc:495:replace_alu$45
  created 1 $alu and 0 $macc cells.

4.13. Executing SHARE pass (SAT-based resource sharing).

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.14.6. Executing OPT_DFF pass (perform DFF optimizations).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.14.9. Rerunning OPT passes. (Maybe there is more to do..)

4.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.14.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.14.16. Finished OPT passes. (There is nothing left to do.)

4.15. Executing MEMORY pass.

4.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.17. Executing OPT pass (performing simple optimizations).

4.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.
<suppressed ~3 debug messages>

4.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.17.3. Executing OPT_DFF pass (perform DFF optimizations).

4.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.17.5. Finished fast OPT passes.

4.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.19. Executing OPT pass (performing simple optimizations).

4.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

4.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.19.6. Executing OPT_SHARE pass.

4.19.7. Executing OPT_DFF pass (perform DFF optimizations).

4.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..

4.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.19.10. Finished OPT passes. (There is nothing left to do.)

4.20. Executing TECHMAP pass (map to technology primitives).

4.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~238 debug messages>

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.
<suppressed ~21 debug messages>

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.21.3. Executing OPT_DFF pass (perform DFF optimizations).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 13 unused cells and 35 unused wires.
<suppressed ~14 debug messages>

4.21.5. Finished fast OPT passes.

4.22. Executing ABC pass (technology mapping using ABC).

4.22.1. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.22.2. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.22.3. Extracting gate netlist of module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.22.4. Extracting gate netlist of module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 2 wires to a netlist network with 1 inputs and 1 outputs.

4.22.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.22.4.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        1
ABC RESULTS:          output signals:        1
Removing temp directory.

4.22.5. Extracting gate netlist of module `\alu_4bit' to `<abc-temp-dir>/input.blif'..
Extracted 54 gates and 64 wires to a netlist network with 10 inputs and 21 outputs.

4.22.5.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:        7
ABC RESULTS:               MUX cells:       13
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:        7
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       21
Removing temp directory.

4.23. Executing OPT pass (performing simple optimizations).

4.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
Optimizing module alu_4bit.

4.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\dff\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\notgate\WIDTH=s32'00000000000000000000000000000001'.
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

4.23.3. Executing OPT_DFF pass (perform DFF optimizations).

4.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\dff\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \alu_4bit..
Removed 0 unused cells and 49 unused wires.
<suppressed ~2 debug messages>

4.23.5. Finished fast OPT passes.

4.24. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `alu_4bit'. Setting top module to alu_4bit.

4.24.1. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001

4.24.2. Analyzing design hierarchy..
Top module:  \alu_4bit
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000010
Used module:     $paramod\dff\WIDTH=s32'00000000000000000000000000000001
Used module:     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001
Removed 0 unused modules.

4.25. Printing statistics.

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000001 ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of ports:                  4
   Number of port bits:              4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DFF_PN0_                      1

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000010 ===

   Number of wires:                  4
   Number of wire bits:              6
   Number of public wires:           4
   Number of public wire bits:       6
   Number of ports:                  4
   Number of port bits:              6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_DFF_PN0_                      2

=== $paramod\dff\WIDTH=s32'00000000000000000000000000000100 ===

   Number of wires:                  4
   Number of wire bits:             10
   Number of public wires:           4
   Number of public wire bits:      10
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_DFF_PN0_                      4

=== $paramod\notgate\WIDTH=s32'00000000000000000000000000000001 ===

   Number of wires:                  2
   Number of wire bits:              2
   Number of public wires:           2
   Number of public wire bits:       2
   Number of ports:                  2
   Number of port bits:              2
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_NOT_                          1

=== alu_4bit ===

   Number of wires:                 53
   Number of wire bits:             88
   Number of public wires:          21
   Number of public wire bits:      56
   Number of ports:                  7
   Number of port bits:             17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                       7
     $_AND_                          4
     $_MUX_                         13
     $_NOR_                          2
     $_NOT_                          8
     $_OR_                           7
     $_XNOR_                         6
     $_XOR_                          6
     $paramod\dff\WIDTH=s32'00000000000000000000000000000001      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000010      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000100      3
     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001      1

=== design hierarchy ===

   alu_4bit                          1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000001      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000010      1
     $paramod\dff\WIDTH=s32'00000000000000000000000000000100      3
     $paramod\notgate\WIDTH=s32'00000000000000000000000000000001      1

   Number of wires:                 75
   Number of wire bits:            130
   Number of public wires:          43
   Number of public wire bits:      98
   Number of ports:                 29
   Number of port bits:             59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     $_ANDNOT_                       7
     $_AND_                          4
     $_DFF_PN0_                     15
     $_MUX_                         13
     $_NOR_                          2
     $_NOT_                          9
     $_OR_                           7
     $_XNOR_                         6
     $_XOR_                          6

4.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000001...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000010...
Checking module $paramod\dff\WIDTH=s32'00000000000000000000000000000100...
Checking module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001...
Checking module alu_4bit...
Found and reported 0 problems.

5. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000001.
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000010.
Deleting now unused module $paramod\dff\WIDTH=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\notgate\WIDTH=s32'00000000000000000000000000000001.
<suppressed ~6 debug messages>

6. Executing PROC pass (convert processes to netlists).

6.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.4. Executing PROC_INIT pass (extract init attributes).

6.5. Executing PROC_ARST pass (detect async resets in processes).

6.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

6.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.8. Executing PROC_DLATCH pass (convert process syncs to latches).

6.9. Executing PROC_DFF pass (convert process syncs to FFs).

6.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.
<suppressed ~15 debug messages>

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_4bit..
Removed 1 unused cells and 0 unused wires.
<suppressed ~1 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

7.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_4bit..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~75 debug messages>

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_4bit..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=7.98) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=10.32) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFE_NN_
    unmapped dff cell: $_DFFE_NP_
    unmapped dff cell: $_DFFE_PN_
    unmapped dff cell: $_DFFE_PP_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

10.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu_4bit':
  mapped 15 $_DFFSR_PNN_ cells to \DFFSR cells.

11. Executing ABC pass (technology mapping using ABC).

11.1. Extracting gate netlist of module `\alu_4bit' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 79 wires to a netlist network with 11 inputs and 36 outputs.

11.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/user/Projects/OpEC/examples/alu_4bit/gscl45nm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "gscl45nm" from "/home/user/Projects/OpEC/examples/alu_4bit/gscl45nm.lib" has 25 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

11.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X1 cells:        5
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:       19
ABC RESULTS:            MUX2X1 cells:        3
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:             OR2X1 cells:        6
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:            XOR2X1 cells:        6
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:       36
Removing temp directory.

12. Executing INSBUF pass (insert buffer cells for connected wires).
Add alu_4bit/$auto$insbuf.cc:97:execute$476: \dff_ALU_Sel.q [0] -> \ALU_Sel_ff [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$477: \dff_ALU_Sel.q [1] -> \ALU_Sel_ff [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$478: \dff_A.q [0] -> \A_ff [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$479: \dff_A.q [1] -> \A_ff [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$480: \dff_A.q [2] -> \A_ff [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$481: \dff_A.q [3] -> \A_ff [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$482: \dff_B.q [0] -> \B_ff [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$483: \dff_B.q [1] -> \B_ff [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$484: \dff_B.q [2] -> \B_ff [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$485: \dff_B.q [3] -> \B_ff [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$486: \dff_Result.q [0] -> \Result [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$487: \dff_Result.q [1] -> \Result [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$488: \dff_Result.q [2] -> \Result [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$489: \dff_Result.q [3] -> \Result [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$490: \dff_Zero.q -> \Zero
Add alu_4bit/$auto$insbuf.cc:97:execute$491: \dff_ALU_Sel.q [0] -> \carry_in
Add alu_4bit/$auto$insbuf.cc:97:execute$492: 1'x -> \carry_out_sub
Add alu_4bit/$auto$insbuf.cc:97:execute$493: 1'x -> \carry_out_sum
Add alu_4bit/$auto$insbuf.cc:97:execute$494: \clk -> \dff_A.clk
Add alu_4bit/$auto$insbuf.cc:97:execute$495: \A [0] -> \dff_A.d [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$496: \A [1] -> \dff_A.d [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$497: \A [2] -> \dff_A.d [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$498: \A [3] -> \dff_A.d [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$499: \notgate0.y -> \dff_A.rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$500: \clk -> \dff_ALU_Sel.clk
Add alu_4bit/$auto$insbuf.cc:97:execute$501: \ALU_Sel [0] -> \dff_ALU_Sel.d [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$502: \ALU_Sel [1] -> \dff_ALU_Sel.d [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$503: \notgate0.y -> \dff_ALU_Sel.rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$504: \clk -> \dff_B.clk
Add alu_4bit/$auto$insbuf.cc:97:execute$505: \B [0] -> \dff_B.d [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$506: \B [1] -> \dff_B.d [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$507: \B [2] -> \dff_B.d [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$508: \B [3] -> \dff_B.d [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$509: \notgate0.y -> \dff_B.rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$510: \clk -> \dff_Result.clk
Add alu_4bit/$auto$insbuf.cc:97:execute$511: \Result_ff [0] -> \dff_Result.d [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$512: \Result_ff [1] -> \dff_Result.d [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$513: \Result_ff [2] -> \dff_Result.d [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$514: \Result_ff [3] -> \dff_Result.d [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$515: \notgate0.y -> \dff_Result.rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$516: \clk -> \dff_Zero.clk
Add alu_4bit/$auto$insbuf.cc:97:execute$517: \Zero_ff -> \dff_Zero.d
Add alu_4bit/$auto$insbuf.cc:97:execute$518: \notgate0.y -> \dff_Zero.rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$519: \rst -> \notgate0.a
Add alu_4bit/$auto$insbuf.cc:97:execute$520: \notgate0.y -> \rst_n
Add alu_4bit/$auto$insbuf.cc:97:execute$521: \sub_result [0] -> \sum_result [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$522: \sub_result [1] -> \sum_result [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$523: \sub_result [2] -> \sum_result [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$524: \sub_result [3] -> \sum_result [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$525: \dff_ALU_Sel.q [0] -> $abc$418$dff_ALU_Sel.q[0]
Add alu_4bit/$auto$insbuf.cc:97:execute$526: \dff_B.q [0] -> $abc$418$dff_B.q[0]
Add alu_4bit/$auto$insbuf.cc:97:execute$527: \dff_A.q [0] -> $abc$418$dff_A.q[0]
Add alu_4bit/$auto$insbuf.cc:97:execute$528: $abc$418$sub_result[0] -> \sub_result [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$529: \dff_ALU_Sel.q [1] -> $abc$418$dff_ALU_Sel.q[1]
Add alu_4bit/$auto$insbuf.cc:97:execute$530: $abc$418$and_result[0] -> \and_result [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$531: $abc$418$or_result[0] -> \or_result [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$532: $abc$418$Result_ff[0] -> \Result_ff [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$533: \dff_A.q [1] -> $abc$418$dff_A.q[1]
Add alu_4bit/$auto$insbuf.cc:97:execute$534: \dff_B.q [1] -> $abc$418$dff_B.q[1]
Add alu_4bit/$auto$insbuf.cc:97:execute$535: $abc$418$sub_result[1] -> \sub_result [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$536: $abc$418$and_result[1] -> \and_result [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$537: $abc$418$or_result[1] -> \or_result [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$538: $abc$418$Result_ff[1] -> \Result_ff [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$539: \dff_A.q [2] -> $abc$418$dff_A.q[2]
Add alu_4bit/$auto$insbuf.cc:97:execute$540: \dff_B.q [2] -> $abc$418$dff_B.q[2]
Add alu_4bit/$auto$insbuf.cc:97:execute$541: $abc$418$sub_result[2] -> \sub_result [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$542: $abc$418$and_result[2] -> \and_result [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$543: $abc$418$or_result[2] -> \or_result [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$544: $abc$418$Result_ff[2] -> \Result_ff [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$545: \dff_B.q [3] -> $abc$418$dff_B.q[3]
Add alu_4bit/$auto$insbuf.cc:97:execute$546: \dff_A.q [3] -> $abc$418$dff_A.q[3]
Add alu_4bit/$auto$insbuf.cc:97:execute$547: $abc$418$sub_result[3] -> \sub_result [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$548: $abc$418$and_result[3] -> \and_result [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$549: $abc$418$or_result[3] -> \or_result [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$550: $abc$418$Result_ff[3] -> \Result_ff [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$551: $abc$418$Zero_ff -> \Zero_ff
Add alu_4bit/$auto$insbuf.cc:97:execute$552: $abc$418$B_for_add_sub[0] -> \B_for_add_sub [0]
Add alu_4bit/$auto$insbuf.cc:97:execute$553: $abc$418$B_for_add_sub[1] -> \B_for_add_sub [1]
Add alu_4bit/$auto$insbuf.cc:97:execute$554: $abc$418$B_for_add_sub[2] -> \B_for_add_sub [2]
Add alu_4bit/$auto$insbuf.cc:97:execute$555: $abc$418$B_for_add_sub[3] -> \B_for_add_sub [3]
Add alu_4bit/$auto$insbuf.cc:97:execute$556: \rst -> $abc$418$rst
Add alu_4bit/$auto$insbuf.cc:97:execute$557: $abc$418$auto$rtlil.cc:3194:NotGate$389 -> $auto$rtlil.cc:3194:NotGate$389
Add alu_4bit/$auto$insbuf.cc:97:execute$558: $abc$418$auto$rtlil.cc:3194:NotGate$391 -> $auto$rtlil.cc:3194:NotGate$391
Add alu_4bit/$auto$insbuf.cc:97:execute$559: $abc$418$auto$rtlil.cc:3194:NotGate$393 -> $auto$rtlil.cc:3194:NotGate$393
Add alu_4bit/$auto$insbuf.cc:97:execute$560: $abc$418$auto$rtlil.cc:3194:NotGate$395 -> $auto$rtlil.cc:3194:NotGate$395
Add alu_4bit/$auto$insbuf.cc:97:execute$561: $abc$418$auto$rtlil.cc:3194:NotGate$397 -> $auto$rtlil.cc:3194:NotGate$397
Add alu_4bit/$auto$insbuf.cc:97:execute$562: $abc$418$auto$rtlil.cc:3194:NotGate$399 -> $auto$rtlil.cc:3194:NotGate$399
Add alu_4bit/$auto$insbuf.cc:97:execute$563: $abc$418$auto$rtlil.cc:3194:NotGate$401 -> $auto$rtlil.cc:3194:NotGate$401
Add alu_4bit/$auto$insbuf.cc:97:execute$564: $abc$418$auto$rtlil.cc:3194:NotGate$403 -> $auto$rtlil.cc:3194:NotGate$403
Add alu_4bit/$auto$insbuf.cc:97:execute$565: $abc$418$auto$rtlil.cc:3194:NotGate$405 -> $auto$rtlil.cc:3194:NotGate$405
Add alu_4bit/$auto$insbuf.cc:97:execute$566: $abc$418$auto$rtlil.cc:3194:NotGate$407 -> $auto$rtlil.cc:3194:NotGate$407
Add alu_4bit/$auto$insbuf.cc:97:execute$567: $abc$418$auto$rtlil.cc:3194:NotGate$409 -> $auto$rtlil.cc:3194:NotGate$409
Add alu_4bit/$auto$insbuf.cc:97:execute$568: $abc$418$auto$rtlil.cc:3194:NotGate$411 -> $auto$rtlil.cc:3194:NotGate$411
Add alu_4bit/$auto$insbuf.cc:97:execute$569: $abc$418$auto$rtlil.cc:3194:NotGate$413 -> $auto$rtlil.cc:3194:NotGate$413
Add alu_4bit/$auto$insbuf.cc:97:execute$570: $abc$418$auto$rtlil.cc:3194:NotGate$415 -> $auto$rtlil.cc:3194:NotGate$415
Add alu_4bit/$auto$insbuf.cc:97:execute$571: $abc$418$auto$rtlil.cc:3194:NotGate$417 -> $auto$rtlil.cc:3194:NotGate$417

13. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port alu_4bit.A: Missing option -inpad.
Don't map input port alu_4bit.ALU_Sel: Missing option -inpad.
Don't map input port alu_4bit.B: Missing option -inpad.
Mapping port alu_4bit.Result using BUFX4.
Mapping port alu_4bit.Zero using BUFX4.
Don't map input port alu_4bit.clk: Missing option -inpad.
Don't map input port alu_4bit.rst: Missing option -inpad.
Removed 27 unused cells and 50 unused wires.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu_4bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu_4bit.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu_4bit'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu_4bit..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu_4bit.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing Verilog backend.

15.1. Executing BMUXMAP pass.

15.2. Executing DEMUXMAP pass.
Dumping module `\alu_4bit'.

16. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 9b894ff0a9, CPU: user 0.40s system 0.02s, MEM: 33.29 MB peak
Yosys 0.54 (git sha1 db72ec3bd, g++ 15.2.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -ffile-prefix-map=/build/yosys/src=/usr/src/debug/yosys -fPIC -O3)
Time spent: 47% 2x abc (0 sec), 17% 25x opt_expr (0 sec), ...
